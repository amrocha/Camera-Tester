import FileReader
from Coordinate import Coordinate
import subprocess

class Scenario:
    """
    Class containing information for a test scenario

    variables
    scenarioID: the unique identifier for this scenario
    coreLog: the path and filename for the core log used to generate this scenario
    gpsLog: the path and filename for the gps log used to generate this scenario
    timeOffset: the timestamp difference used to compare points in time between the two log files
    maxRadius: the maximum distance a point from the core log can be from a corresponding gps log point for it to be considered accurate
    """
    def __init__ (self, scenarioID, maxRadius, gpsLog, coreLog=None):
        self.scenarioID = scenarioID
        self.coreLog = coreLog
        self.gpsLog = gpsLog
        self.timeOffset = None
        self.maxRadius = maxRadius

    def run(self):
        if self.coreLog == None:
            self.coreLog = self.runCamSim()
        self.core_entries = FileReader.parseCoreLog(self.coreLog)
        self.gps_entries = FileReader.parseGpsLog(self.gpsLog)
        self.timeOffset = self.calculateTimeOffset()
        self.comparePath()

        print 'id: ', self.scenarioID
        print 'core log file: ', self.coreLog
        print 'gps log file: ', self.gpsLog
        print 'time offset: ', self.timeOffset
        print 'maximum radius: ', self.maxRadius
        print 'number of core file entries: ', len(self.core_entries)
        print 'number of gps file entries: ', len(self.gps_entries)
        
    #this method will call camsim, wait until it completes running, and then return the path and filename that was generated by camsim
    def runCamSim(self):
        #call camsim
        CamSimExe = "CamSimDummyApp.exe"
        CamSimArgs = ["aaa", "bbb", "ccc"]
        subprocess.call([CamSimExe] + CamSimArgs)

        #wait

        #obtain and return path and filename of the log file
        return 'Corefile.log'

    """
    Calculates the difference in timestamps between the two files
    The GPS log contains timestamps generated during the time when the video was created
    The Core log contains timestamps generated during the run of camsim
    """
    def calculateTimeOffset(self):
        return 33;

    #this will compare the files and output the result
    def comparePath(self):
        x = ""

    def export(self):
        f = open('path.kml', 'w')

        kml =   '<?xml version="1.0" encoding="UTF-8"?>\n'
        kml +=  '<kml xmlns="http://www.opengis.net/kml/2.2">\n'
        kml +=      '<Document>\n'
        kml +=          '<name>Paths</name>\n'
        kml +=          '<description>Exported KML file with lines for the GPS and Asterix log files</description>\n'
        kml +=          '<Style id="yellowLineGreenPoly">\n'
        kml +=              '<LineStyle>\n'
        kml +=                  '<color>7f00ffff</color>\n'
        kml +=                  '<width>4</width>\n'
        kml +=              '</LineStyle>\n'
        kml +=              '<PolyStyle>\n'
        kml +=                  '<color>7f00ff00</color>\n'
        kml +=              '</PolyStyle>\n'
        kml +=          '</Style>\n'
        kml +=          '<Style id="redLineGreenPoly">\n'
        kml +=              '<LineStyle>\n'
        kml +=                  '<color>ff0000ff</color>\n'
        kml +=                  '<width>4</width>\n'
        kml +=              '</LineStyle>\n'
        kml +=              '<PolyStyle>\n'
        kml +=                  '<color>7f00ff00</color>\n'
        kml +=              '</PolyStyle>\n'
        kml +=          '</Style>\n'
        kml +=          '<Placemark>'
        kml +=              '<name>GPS Log Path</name>'
        kml +=              '<description>Path generated by the GPS log</description>'
        kml +=              '<styleUrl>#yellowLineGreenPoly</styleUrl>'
        kml +=              '<LineString>'
        kml +=                  '<extrude>1</extrude>'
        kml +=                  '<tessellate>1</tessellate>'
        kml +=                  '<altitudeMode>absolute</altitudeMode>'
        kml +=                  '<coordinates>'
        for entry in self.gps_entries:
            kml += repr(entry.longitude)
            kml += ','
            kml += repr(entry.latitude)
            kml += ',0\n'
        kml +=                  '</coordinates>'
        kml +=              '</LineString>'
        kml +=          '</Placemark>'
		#Iterates over the number of asterisk file entries
		i = 0
		while (i < len(self.asterisk_entries)):
			kml +=          '<Placemark>'
			kml +=              '<name>Core Log TrackNum:</name>'
			kml +=				repr(entry.tn)
			kml +=				'</name>'
			kml +=              '<description>Path generated by the Core log</description>'
			kml +=              '<styleUrl>#redLineGreenPoly</styleUrl>'
			kml +=              '<LineString>'
			kml +=                  '<extrude>1</extrude>'
			kml +=                  '<tessellate>1</tessellate>'
			kml +=                  '<altitudeMode>absolute</altitudeMode>'
			kml +=                  '<coordinates>'
			#Enters the first coordinates of a new track number
			kml += repr(self.asterisk_entries[i].longitude)
			kml += ','
			kml += repr (self.asterisk_entries[i].latitude)
			kml += ',0\n'
			#If the track number changes, stop the loop, and create a new line
			while (self.asterisk_entries[i].tn != self.asterisk_entries[i+1].tn):
				i += 1
				kml += repr(entry.longitude)
				kml += ','
				kml += repr(entry.latitude)
				kml += ',0\n'
			kml +=                  '</coordinates>'
			kml +=              '</LineString>'
			kml +=          '</Placemark>'
        kml +=      '</Document>\n'
        kml += '</kml>\n'

        f.write(kml)
        f.close()